// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider = "prisma-client-js"
	output   = "../src/generated/prisma"
}

datasource db {
	provider = "sqlite"
	url      = env("DATABASE_URL")
}

model User {
	id            String   @id @default(cuid())
	name          String?
	email         String?  @unique
	emailVerified DateTime?
	image         String?
	passwordHash  String?

	accounts      Account[]
	sessions      Session[]

	addresses     Address[]
	orders        Order[]
	reviews       Review[]
	wishlist      Wishlist?
	cart          Cart?

	createdAt     DateTime @default(now())
	updatedAt     DateTime @updatedAt
}

model Account {
	id                String  @id @default(cuid())
	userId            String
	type              String
	provider          String
	providerAccountId String
	refresh_token     String?
	access_token      String?
	expires_at        Int?
	token_type        String?
	scope             String?
	id_token          String?
	session_state     String?

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)

	@@unique([provider, providerAccountId])
}

model Session {
	id           String   @id @default(cuid())
	sessionToken String   @unique
	userId       String
	expires      DateTime

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
	identifier String
	token      String   @unique
	expires    DateTime

	@@unique([identifier, token])
}

model Category {
	id        String     @id @default(cuid())
	name      String     @unique
	slug      String     @unique
	parentId  String?
	parent    Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
	children  Category[] @relation("CategoryToCategory")
	products  Product[]

	createdAt DateTime   @default(now())
	updatedAt DateTime   @updatedAt
}

model Product {
	id            String           @id @default(cuid())
	name          String
	slug          String           @unique
	description   String
	price         Int              // price in cents
	modelUrl      String?          // 3D model (GLB/GLTF)
	rating        Float            @default(0)
	ratingCount   Int              @default(0)
	isActive      Boolean          @default(true)

	categoryId    String?
	category      Category?        @relation(fields: [categoryId], references: [id])

	images        ProductImage[]
	variants      ProductVariant[]
	reviews       Review[]
	orderItems    OrderItem[]
	stockLogs     StockLog[]
	cartItems     CartItem[]
	wishlistItems WishlistItem[]

	createdAt     DateTime         @default(now())
	updatedAt     DateTime         @updatedAt

	@@index([categoryId])
}

model ProductImage {
	id        String  @id @default(cuid())
	productId String
	url       String
	alt       String?
	position  Int     @default(0)

	product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

	@@index([productId])
}

model ProductVariant {
	id         String  @id @default(cuid())
	productId  String
	sku        String  @unique
	color      String?
	size       String?
	stock      Int     @default(0)
	extraPrice Int     @default(0) // added on top of Product.price

	product     Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
	cartItems   CartItem[]
	orderItems  OrderItem[]
	stockLogs   StockLog[]

	@@index([productId])
}

model Review {
	id        String   @id @default(cuid())
	userId    String
	productId String
	rating    Int
	comment   String?

	user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
	product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

	createdAt DateTime @default(now())

	@@unique([userId, productId])
}

model Address {
	id         String  @id @default(cuid())
	userId     String
	label      String
	fullName   String
	line1      String
	line2      String?
	city       String
	state      String?
	postalCode String
	country    String
	phone      String?
	isDefault  Boolean @default(false)

	user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
	orders Order[]
}

model Cart {
	id        String     @id @default(cuid())
	userId    String?    @unique
	items     CartItem[]
	couponId  String?
	coupon    Coupon?    @relation(fields: [couponId], references: [id])

	createdAt DateTime   @default(now())
	updatedAt DateTime   @updatedAt

	user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItem {
	id               String          @id @default(cuid())
	cartId           String
	productId        String
	productVariantId String?
	quantity         Int             @default(1)
	unitPrice        Int             // snapshot price in cents

	cart     Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
	product  Product         @relation(fields: [productId], references: [id])
	variant  ProductVariant? @relation(fields: [productVariantId], references: [id])

	@@index([cartId])
	@@index([productId])
	@@index([productVariantId])
}

model Order {
	id             String      @id @default(cuid())
	userId         String
	addressId      String?
	couponId       String?
	status         OrderStatus @default(PENDING)
	subtotal       Int
	discount       Int         @default(0)
	shipping       Int         @default(0)
	tax            Int         @default(0)
	total          Int
	currency       String      @default("usd")
	paymentIntent  String?
	provider       String?

	items          OrderItem[]

	user    User     @relation(fields: [userId], references: [id])
	address Address? @relation(fields: [addressId], references: [id])
	coupon  Coupon?  @relation(fields: [couponId], references: [id])

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	@@index([userId])
}

enum OrderStatus {
	PENDING
	PAID
	SHIPPED
	DELIVERED
	CANCELED
	REFUNDED
}

model OrderItem {
	id               String          @id @default(cuid())
	orderId          String
	productId        String
	productVariantId String?
	quantity         Int
	unitPrice        Int

	order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
	product Product         @relation(fields: [productId], references: [id])
	variant ProductVariant? @relation(fields: [productVariantId], references: [id])

	@@index([orderId])
}

model Coupon {
	id          String   @id @default(cuid())
	code        String   @unique
	description String?
	type        CouponType
	amount      Int
	maxUses     Int?
	usedCount   Int      @default(0)
	startsAt    DateTime?
	expiresAt   DateTime?
	isActive    Boolean  @default(true)

	carts   Cart[]
	orders  Order[]

	createdAt DateTime @default(now())
}

enum CouponType {
	PERCENT
	FIXED
}

model Wishlist {
	id     String        @id @default(cuid())
	userId String        @unique
	items  WishlistItem[]

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WishlistItem {
	id         String  @id @default(cuid())
	wishlistId String
	productId  String

	wishlist Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
	product  Product  @relation(fields: [productId], references: [id])

	@@unique([wishlistId, productId])
}

model StockLog {
	id         String   @id @default(cuid())
	productId  String
	variantId  String?
	change     Int
	reason     String?
	createdAt  DateTime @default(now())

	product Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
	variant ProductVariant? @relation(fields: [variantId], references: [id])

	@@index([productId])
}
